import telebot
from telebot import types
import json
import os
import io
import segno
import threading
import time
import math
from PIL import Image, ImageDraw, ImageFont

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
current_index_state = {}

# ----------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -----------------------
TOKEN = ''
# –°—Ç–∞—Ä—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–ø—ã—Ç–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ)
EXP_COST = 5      # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –æ–ø—ã—Ç–∞ (SC Coin) –¥–ª—è 10 –æ–ø—ã—Ç–∞
EXP_GAIN = 10     # —Å–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –¥–∞—ë—Ç—Å—è –∑–∞ –ø–æ–∫—É–ø–∫—É (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
DATA_FILE = r'data\fio.json'
REKLAMA_FILE = r'data\reklama.json'
QR_CODES_FILE = r'data\qr_codes.json'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
ITEMS = [
    {"image": "3.jpg", "price": 30, "grade": 3},  # –ò–Ω–¥–µ–∫—Å 1 (1-based)
    {"image": "2.jpg", "price": 40, "grade": 4},  # –ò–Ω–¥–µ–∫—Å 2
    {"image": "1.jpg", "price": 50, "grade": 5}   # –ò–Ω–¥–µ–∫—Å 3
]



def delete_message_after_delay(chat_id, message_id, delay):
    time.sleep(delay)
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ----------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ -----------------------

bot = telebot.TeleBot(TOKEN)

# ----------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------------
def load_data():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, user_info in data.items():
        user_info.setdefault('exp', 0)
        user_info.setdefault('level', 1)
        user_info.setdefault('sc_coin', 0)
        user_info.setdefault('cart', [])
    return data

def save_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_reklama():
    with open(REKLAMA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_reklama(text, photo):
    with open(REKLAMA_FILE, 'w', encoding='utf-8') as f:
        json.dump({"text": text, "photo": photo}, f, ensure_ascii=False, indent=4)

def load_qr_codes():
    with open(QR_CODES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_qr_codes(qr_codes):
    with open(QR_CODES_FILE, 'w', encoding='utf-8') as f:
        json.dump(qr_codes, f, ensure_ascii=False, indent=4)

def generate_unique_user_id(user_data):
    user_ids = set(user_data.keys())
    new_user_id = 1
    while str(new_user_id) in user_ids:
        new_user_id += 1
    return str(new_user_id)

def get_threshold(level):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è `level`.
    –î–ª—è —É—Ä–æ–≤–Ω—è 1 –ø–æ—Ä–æ–≥ —Ä–∞–≤–µ–Ω 0, –¥–ª—è 2 ‚Äì 10, –¥–ª—è 3 ‚Äì 10+20=30, –¥–ª—è 4 ‚Äì 10+20+30=60 –∏ —Ç.–¥.
    """
    return sum(i * 10 for i in range(1, level))

def create_level_image(user_info):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —É—Ä–æ–≤–Ω—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Å—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç –∏ —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.
    """
    current_level = user_info.get('level', 1)
    total_exp = user_info.get('exp', 0)
    base_image = Image.open(r'image\level_base.jpg')
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGBA, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
    if base_image.mode == 'RGBA':
        base_image = base_image.convert('RGB')
    
    draw = ImageDraw.Draw(base_image)
    
    try:
        level_font = ImageFont.truetype("arial.ttf", 100)
        exp_font = ImageFont.truetype("arial.ttf", 40)
    except:
        level_font = ImageFont.load_default()
        exp_font = ImageFont.load_default()
    
    current_threshold = get_threshold(current_level)
    next_threshold = get_threshold(current_level + 1)
    current_progress = total_exp - current_threshold
    required_for_next = next_threshold - current_threshold  # –Ω–∞–ø—Ä–∏–º–µ—Ä, current_level * 10

    level_text = f"{current_level}"
    text_width = draw.textlength(level_text, font=level_font)
    draw.text(((base_image.width - text_width) // 2, 100), level_text, font=level_font, fill="white")
    
    progress_width = 800
    progress_height = 40
    progress_x = (base_image.width - progress_width) // 2
    progress_y = 400

    draw.rectangle([(progress_x, progress_y), (progress_x + progress_width, progress_y + progress_height)], fill="#444444")
    fill_width = int((current_progress / required_for_next) * progress_width) if required_for_next > 0 else progress_width
    draw.rectangle([(progress_x, progress_y), (progress_x + fill_width, progress_y + progress_height)], fill="#4CAF50")
    
    progress_text = f"{current_progress}/{required_for_next}"
    text_width = draw.textlength(progress_text, font=exp_font)
    draw.text(((base_image.width - text_width) // 2, progress_y + progress_height + 10), progress_text, font=exp_font, fill="white")
    
    buf = io.BytesIO()
    base_image.save(buf, format='JPEG')
    buf.seek(0)
    return buf

# ----------------------- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------------

def show_main_menu(chat_id, message_id=None):
    user_data = load_data()
    user_info = next((info for info in user_data.values() if info.get('telegram_id') == chat_id), None)
    if not user_info:
        bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    markup = types.InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    shop_button = types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data='shop_menu')
    profile_button = types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
    if user_info.get('cart'):
        cart_button = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')
        markup.add(shop_button, cart_button, profile_button)
    else:
        markup.add(shop_button, profile_button)

    bot.send_chat_action(chat_id, 'typing')
    with open(r'image\main.jpg', 'rb') as photo:
        if message_id:
            try:
                bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=types.InputMediaPhoto(photo),
                    reply_markup=markup
                )
                bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_photo(chat_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=markup)
        else:
            bot.send_photo(chat_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=markup)

@bot.message_handler(commands=['menu'])
def handle_menu_command(message):
    chat_id = message.chat.id
    show_main_menu(chat_id)

@bot.message_handler(commands=['help'])
def handle_help_command(message):
    help_text = (
        "üìû –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "üîπ Telegram: [@redjexs](https://t.me/redjexs)\n"
        "üîπ VK: [redjex](https://vk.com/redjex)\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', disable_web_page_preview=True)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    if message.text.startswith('/start activate_'):
        qr_code_id = message.text.split('activate_')[1]
        activate_qr_code(chat_id, qr_code_id)
    else:
        user_data = load_data()
        user_info = next((info for info in user_data.values() if info.get('telegram_id') == chat_id), None)
        if not user_info:
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
            keyboard.add(button_phone)
            msg = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
            bot.register_next_step_handler(msg, show_profile)
        else:
            show_main_menu(chat_id)

def show_profile(message_or_chat_id):
    if hasattr(message_or_chat_id, 'chat'):
        chat_id = message_or_chat_id.chat.id
        phone = message_or_chat_id.contact.phone_number if message_or_chat_id.contact else None
    else:
        chat_id = message_or_chat_id
        phone = None

    user_data = load_data()
    user_info = next((info for info in user_data.values() if info.get('telegram_id') == chat_id), None)
    if not user_info:
        new_user_id = generate_unique_user_id(user_data)
        user_info = {
            "telegram_id": chat_id,
            "phone": phone,
            "exp": 0,
            "level": 1,
            "sc_coin": 0,
            "cart": [],
            "user_number": int(new_user_id)
        }
        user_data[new_user_id] = user_info
        save_data(user_data)

    next_threshold = get_threshold(user_info['level'] + 1)
    exp_needed = next_threshold - user_info.get('exp', 0)
    if exp_needed < 0:
        exp_needed = 0

    profile_text = (
        f"üìû  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üíµ  SC Coin: {user_info.get('sc_coin', 0)}\n"
        f"üíé  –û–ø—ã—Ç: {user_info.get('exp', 0)}\n"
        f"üîº  –£—Ä–æ–≤–µ–Ω—å: {user_info.get('level', 1)}\n"
        f"üî¢  –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: {user_info.get('user_number')}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è", callback_data='show_progress'))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu'))

    with open(r'image\profile.jpg', 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=profile_text, reply_markup=markup)

# --------------- –ù–û–í–û–ï –ú–ï–ù–Æ –ú–ê–ì–ê–ó–ò–ù–ê ---------------

@bot.callback_query_handler(func=lambda call: call.data == 'shop_menu')
def shop_menu_handler(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    chat_id = call.message.chat.id
    markup = types.InlineKeyboardMarkup()
    grade_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="shop_grade")
    exp_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –æ–ø—ã—Ç", callback_data="shop_exp")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
    markup.add(grade_button, exp_button)
    markup.add(back_button)
    with open(r'image\market.jpg', 'rb') as photo:
        bot.send_photo(chat_id, photo, caption="–ú–∞–≥–∞–∑–∏–Ω", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'shop_grade')
def shop_grade_handler(call):
    chat_id = call.message.chat.id
    max_index = len(ITEMS)
    if max_index == 0:
        bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç!")
        return
    show_shop(chat_id, max_index, call.message.message_id)



@bot.callback_query_handler(func=lambda call: call.data == 'shop_exp')
def shop_exp_handler(call):
    chat_id = call.message.chat.id
    markup = types.InlineKeyboardMarkup()
    button10 = types.InlineKeyboardButton("10", callback_data="buy_exp_10")
    button20 = types.InlineKeyboardButton("20", callback_data="buy_exp_20")
    button50 = types.InlineKeyboardButton("50", callback_data="buy_exp_50")
    buttonCustom = types.InlineKeyboardButton("–°–≤–æ—ë –∫–æ–ª-–≤–æ", callback_data="buy_exp_custom")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_shop")
    markup.row(button10, button20, button50)
    markup.row(buttonCustom)
    markup.row(back_button)
    with open(r'image\exp.jpg', 'rb') as photo:
        bot.send_photo(chat_id, photo, caption="–ü–æ–∫—É–ø–∫–∞ –æ–ø—ã—Ç–∞", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_shop')
def back_to_shop_handler(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    shop_menu_handler(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_exp_"))
def buy_exp_options_handler(call):
    chat_id = call.message.chat.id
    data = call.data
    if data == "buy_exp_10":
        amount = 10
        cost = 5
        buy_experience(chat_id, amount, cost)
        bot.answer_callback_query(call.id)
    elif data == "buy_exp_20":
        amount = 20
        cost = 9
        buy_experience(chat_id, amount, cost)
        bot.answer_callback_query(call.id)
    elif data == "buy_exp_50":
        amount = 50
        cost = 20
        buy_experience(chat_id, amount, cost)
        bot.answer_callback_query(call.id)
    elif data == "buy_exp_custom":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞:")
        bot.register_next_step_handler(call.message, process_custom_exp)

def process_custom_exp(message):
    chat_id = message.chat.id
    try:
        amount = int(message.text)
        if amount <= 0:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø—ã—Ç–∞.")
            return
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    cost = math.ceil(amount * 0.5)
    buy_experience(chat_id, amount, cost)

def buy_experience(chat_id, amount, cost):
    user_data = load_data()
    user_info = next((u for u in user_data.values() if u.get('telegram_id') == chat_id), None)
    if not user_info:
        bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    if user_info.get('sc_coin', 0) < cost:
        bot.send_message(chat_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SC Coin! –î–ª—è –ø–æ–∫—É–ø–∫–∏ {amount} –æ–ø—ã—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è {cost} SC Coin.")
        return
    user_info['sc_coin'] -= cost
    user_info['exp'] += amount
    while user_info['exp'] >= get_threshold(user_info['level'] + 1):
        user_info['level'] += 1
        bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {user_info['level']} —É—Ä–æ–≤–Ω—è!")
    save_data(user_data)
    bot.send_message(chat_id, f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {amount} –æ–ø—ã—Ç–∞ –∑–∞ {cost} SC Coin!")

@bot.callback_query_handler(func=lambda call: call.data == 'buy_exp')
def buy_exp(call):
    shop_exp_handler(call)

@bot.callback_query_handler(func=lambda call: call.data == 'show_progress')
def show_progress(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    chat_id = call.message.chat.id
    user_data = load_data()
    user_info = next((u for u in user_data.values() if u.get('telegram_id') == chat_id), None)
    if not user_info:
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    level_image = create_level_image(user_info)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='profile'))
    bot.send_photo(chat_id, level_image, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'delete_qr')
def handle_delete_qr(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    bot.answer_callback_query(call.id, "‚úÖ QR‚Äë–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def callback_profile(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_profile(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'delete_cart_message')
def delete_cart_message(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    show_main_menu(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("shop_"))
def shop_handler(call):
    chat_id = call.message.chat.id
    index = int(call.data.split("_")[1])
    current_index_state[chat_id] = int(index)
    show_shop(chat_id, int(index), call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "cart")
def show_cart_handler(call):
    show_cart(call.message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ü–µ–Ω–æ–∫)
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_item_"))
def buy_rating_handler(call):
    try:
        item_index = int(call.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞
        buy_shop_item(call, item_index)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")

def buy_shop_item(call, item_index):
    chat_id = call.message.chat.id
    user_data = load_data()
    user_info = next((u for u in user_data.values() if u['telegram_id'] == chat_id), None)
    
    if not user_info:
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if 1 <= item_index <= len(ITEMS):
        item = ITEMS[item_index - 1]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä")
        return
    
    if user_info['sc_coin'] >= item['price']:
        user_info['sc_coin'] -= item['price']
        user_info['cart'].append(item_index)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º 1-based –∏–Ω–¥–µ–∫—Å
        save_data(user_data)
        bot.answer_callback_query(
            call.id,
            text=f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {item['grade']}!", 
            show_alert=True
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SC Coin!")

def buy_rating_item(call, rating):
    chat_id = call.message.chat.id
    user_data = load_data()
    user_info = next((u for u in user_data.values() if u.get('telegram_id') == chat_id), None)
    if not user_info:
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Ç–æ–≤–∞—Ä–∞
    grade_to_index = {3: 0, 4: 1, 5: 2}  # 3 -> ITEMS[0], 4 -> ITEMS[1], 5 -> ITEMS[2]
    
    if rating not in grade_to_index:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä")
        return
    
    item_index = grade_to_index[rating]
    item = ITEMS[item_index]
    
    if user_info.get('sc_coin', 0) >= item['price']:
        user_info['sc_coin'] -= item['price']
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_info['cart'].append(item_index + 1)  # +1 –¥–ª—è 1-based –Ω–æ–º–µ—Ä–∞
        save_data(user_data)
        bot.answer_callback_query(
            call.id,
            text=f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {item['grade']}!",
            show_alert=True
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SC Coin!")


def show_cart(chat_id):
    user_data = load_data()
    user_info = next((info for info in user_data.values() if info['telegram_id'] == chat_id), None)
    if not user_info or not user_info.get('cart'):
        bot.send_message(chat_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    cart_items = user_info['cart']
    cart_text = "üì¶ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item_index in cart_items:
        if isinstance(item_index, int) and 1 <= item_index <= len(ITEMS):
            item = ITEMS[item_index - 1]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 1-based –≤ 0-based –∏–Ω–¥–µ–∫—Å
            cart_text += f"‚Ä¢ –û—Ü–µ–Ω–∫–∞ {item['grade']} (–¶–µ–Ω–∞: {item['price']} SC Coin)\n"
        else:
            print(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ({item_index})")
            continue

    markup = types.InlineKeyboardMarkup()
    for item_index in cart_items:
        if isinstance(item_index, int) and 1 <= item_index <= len(ITEMS):
            item = ITEMS[item_index - 1]
            markup.add(types.InlineKeyboardButton(
                f"–ü–æ–ª—É—á–∏—Ç—å QR –¥–ª—è –æ—Ü–µ–Ω–∫–∏ {item['grade']}",
                callback_data=f"create_qr_{user_info['user_number']}_{item_index}"
            ))
    
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='delete_cart_message')
    markup.add(back_button)
    
    with open(r'image\cart.jpg', 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=cart_text, reply_markup=markup)


def show_shop(chat_id, index, message_id=None):
    if not (1 <= index <= len(ITEMS)):
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞!")
        return
    item = ITEMS[index - 1]
    caption = f"–¶–µ–Ω–∞: {item['price']} SC Coin"
    markup = types.InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –∑–∞–¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callback_data "<" –∏ ">"
    prev_button = types.InlineKeyboardButton("<", callback_data="<")
    next_button = types.InlineKeyboardButton(">", callback_data=">")
    # –ö–Ω–æ–ø–∫–∞-—Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è
    counter_button = types.InlineKeyboardButton(f"{len(ITEMS) - index + 1}/{len(ITEMS)}", callback_data="counter")
    buy_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_item_{index}")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')
    
    markup.add(prev_button, counter_button, next_button)
    markup.add(buy_button)
    markup.add(back_button)
    
    bot.send_chat_action(chat_id, 'typing')
    with open(f'image\\shop\\{item["image"]}', 'rb') as photo:
        if message_id:
            try:
                bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=message_id,
                    media=types.InputMediaPhoto(photo),
                    reply_markup=markup
                )
                bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=caption,
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            bot.send_photo(chat_id, photo, caption=caption, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    chat_id = call.message.chat.id
    if call.data == "profile":
        bot.delete_message(chat_id, call.message.message_id)
        show_profile(chat_id)
    elif call.data == 'delete_cart_message':
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    elif call.data == "back_to_menu":
        bot.delete_message(chat_id, call.message.message_id)
        show_main_menu(chat_id)
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å callback "shop_*" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞) 
    elif call.data.startswith("shop_"):
        index = call.data.split("_")[1]
        current_index_state[chat_id] = int(index)
        show_shop(chat_id, int(index), call.message.message_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏–∫–ª–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    elif call.data == "<":
        current_index = current_index_state.get(chat_id, 1)
        current_index = 3 if current_index == 1 else current_index - 1
        current_index_state[chat_id] = current_index
        show_shop(chat_id, current_index, call.message.message_id)
    elif call.data == ">":
        current_index = current_index_state.get(chat_id, 1)
        current_index = 1 if current_index == 3 else current_index + 1
        current_index_state[chat_id] = current_index
        show_shop(chat_id, current_index, call.message.message_id)
    elif call.data == "cart":
        show_cart(chat_id)
    elif call.data.startswith("buy_"):
        try:
            index = int(call.data.split("_")[1])
            buy_shop_item(call, index)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")
    elif call.data.startswith("create_qr_"):
        parts = call.data.split("_")
        if len(parts) == 4:
            user_id = parts[2]
            item_number = parts[3]
            create_qr_code(chat_id, user_id, item_number)

        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
def create_qr_code(chat_id, user_number, item_number):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        user_number = int(user_number)
        item_number = int(item_number)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ QR‚Äë–∫–æ–¥–æ–≤
    user_data = load_data()
    qr_codes = load_qr_codes()

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = next(
        (u for u in user_data.values() if u['user_number'] == user_number and u['telegram_id'] == chat_id),
        None
    )
    if not user_info:
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if item_number not in user_info.get('cart', []):
        bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è QR‚Äë–∫–æ–¥–∞ (—ç—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    qr_code_key = f"{user_number}_{item_number}_{int(time.time())}"

    # –°–æ–∑–¥–∞—ë–º QR‚Äë–∫–æ–¥ —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    try:
        qr = segno.make(f"https://t.me/School_economics_bot?start=activate_{qr_code_key}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR‚Äë–∫–æ–¥–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR‚Äë–∫–æ–¥ –≤ –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    try:
        qr.save(img_buffer, kind="png", scale=10)
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR‚Äë–∫–æ–¥–∞")
        return
    img_buffer.seek(0)

    # (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ QR‚Äë–∫–æ–¥–µ
    qr_codes[qr_code_key] = {
        "user_id": chat_id,
        "user_number": user_number,
        "item_number": item_number,
        "activated": False,
        "timestamp": time.time()
    }
    save_qr_codes(qr_codes)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–£–¥–∞–ª–∏—Ç—å"
    markup = types.InlineKeyboardMarkup()
    delete_button = types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_qr")
    markup.add(delete_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    bot.send_photo(
        chat_id,
        img_buffer,
        caption=f"üîê QR‚Äë–∫–æ–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ {ITEMS[item_number-1]['grade']}\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 24 —á–∞—Å–∞",
        reply_markup=markup
    )

    

def activate_qr_code(chat_id, qr_code_id):
    qr_codes = load_qr_codes()
    
    if qr_code_id not in qr_codes:
        bot.send_message(chat_id, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
        return

    qr_data = qr_codes[qr_code_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (24 —á–∞—Å–∞)
    if time.time() - qr_data['timestamp'] > 86400:
        bot.send_message(chat_id, "‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫")
        del qr_codes[qr_code_id]
        save_qr_codes(qr_codes)
        return

    if qr_data['activated']:
        bot.send_message(chat_id, "‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_data()
    user_info = next(
        (u for u in user_data.values() 
         if u['user_number'] == qr_data['user_number']),
        None
    )

    if user_info and qr_data['item_number'] in user_info.get('cart', []):
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user_info['cart'].remove(qr_data['item_number'])
        qr_data['activated'] = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª—å
        if 'grades' not in user_info:
            user_info['grades'] = []
        user_info['grades'].append(ITEMS[qr_data['item_number']-1]['grade'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data(user_data)
        save_qr_codes(qr_codes)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        msg = bot.send_message(
            chat_id,
            f"‚úÖ –û—Ü–µ–Ω–∫–∞ {ITEMS[qr_data['item_number']-1]['grade']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        )
        bot.send_message(
            qr_data['user_id'],
            f"üéâ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ {ITEMS[qr_data['item_number']-1]['grade']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"
        )



# ----------------------- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π -----------------------
TEACHER_IDS = []
@bot.message_handler(commands=['add_points'])
def add_points(message):
    if message.from_user.id not in TEACHER_IDS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()[1:]
    if len(args) != 2:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_points –ü–æ—Ä—è–¥–∫–æ–≤—ã–π_–Ω–æ–º–µ—Ä –∏_–∫–æ–ª-–≤–æ_–ø–æ–∏–Ω—Ç–æ–≤.")
        return
    user_number, points = args
    try:
        user_number = int(user_number)
        points = int(points)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        return
    user_data = load_data()
    user_info = next((info for info in user_data.values() if info.get('user_number') == user_number), None)
    if not user_info:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_info['sc_coin'] = user_info.get('sc_coin', 0) + points
    save_data(user_data)
    bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {points} SC Coin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º {user_number}.")

# ----------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------------
bot.polling(none_stop=True)
